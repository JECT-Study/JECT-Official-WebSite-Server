name: continuous deployment

on:
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
#  ECR_REPOSITORY: jecthome/was-repo
  S3_BUCKET_NAME: ject-bucket
  CODE_DEPLOY_APPLICATION_NAME: ject-apply-deployer
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: actions-deployer

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: ECR 로그인
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2

      - name: S3에서 설정파일 복사
        run: |
          aws s3 cp s3://ject-bucket/properties/application-prod.yml \
          ./src/main/resources/application-prod.yml

      - name: gradle 실행 권한 부여
        run: chmod +x ./gradlew

      - name: gradle 빌드
        run: ./gradlew clean build -x test --no-daemon

      - name: Upload to AWS S3
        run: |
          aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/apps/$GITHUB_SHA.zip \
          --source .

      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=apps/$GITHUB_SHA.zip,bundleType=zip

#      - name: Docker 이미지 빌드 및 ECR 배포
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: latest
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: EC2로 파일 복사 (compose-prod.yaml 및 nginx.conf 포함)
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.EC2_IP }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: './compose-prod.yml,./nginx.conf'
#          target: '/home/ubuntu'
#
#      - name: EC2에서 Docker Compose를 통한 애플리케이션 실행
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_IP }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            export AWS_REGION=${{ env.AWS_REGION }}
#            export ECR_URI=${{ secrets.ECR_URI }}
#            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
#
#            # .env 파일 생성 및 ECR_IMAGE 변수 추가
#            touch /home/ubuntu/.env
#            echo ECR_IMAGE=${{ steps.build-image.outputs.image }} >> /home/ubuntu/.env
#
#            # ECR 레지스트리에 로그인
#            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_URI/$ECR_REPOSITORY
#
#            # 기존 컨테이너 다운
#            sudo docker compose -f ~/compose-prod.yml down
#
#            # 최신 이미지 Pull
#            sudo docker compose -f ~/compose-prod.yml pull
#
#            # 컨테이너 실행
#            sudo docker compose -f ~/compose-prod.yml up -d
